#!/hive/sbin/bash


#
# Copyright (C) 2016-2020  Hiveon
# Distributed under GNU GENERAL PUBLIC LICENSE 2.0
# License information can be found in the LICENSE file or at https://github.com/minershive/hiveos-asic/blob/master/LICENSE.txt
#


readonly script_mission='Client for ASICs: agent-screen helper'
readonly script_version='1.0.10'
readonly script_basename="$( basename "$0" )"
readonly DEBUG=0


#
# !!! also can be started from cron and on startup !!!
#


# !!! bash strict mode, no unbound variables

set -o nounset


# functions

function errcho {
	# uniform error logging to stderr
	echo -e "${script_basename}: Error in $0:${FUNCNAME[1]}(): $*"
} 1>&2

# functions: screen

function is_screen_session_exist {
	# Usage: is_screen_session_exist 'session name' -> $?

	# args
	(( $# == 1 )) || { errcho 'only 1 argument allowed'; return $(( exitcode_ERROR_IN_ARGUMENTS )); }
	local -r session_name="${1-}"

	# code
	if (( DEBUG )); then
		screen -S "$session_name" -X select .
	else
		screen -S "$session_name" -X select . > /dev/null
	fi
}

function screen_attach_to_session {
	# Usage: screen_attach_to_session 'session name'

	# args
	(( $# == 1 )) || { errcho 'only 1 argument allowed'; return $(( exitcode_ERROR_IN_ARGUMENTS )); }
	local -r session_name="${1-}"

	# code
	if is_screen_session_exist "$session_name"; then
		#
		# why setting TERM in such a fashion? screen has an argument for that:
		#
		# -T term       Use term as $TERM for windows, rather than "screen".
		#
		if (( DEBUG )); then
			TERM='vt102' screen -x -S "$session_name"
		else
			TERM='vt102' screen -x -S "$session_name" > /dev/null
		fi
	else
		errcho "'$session_name' hasn't been started. Weird..."
	fi
}

function screen_start_session {
	# Usage: screen_start_session 'cmd' [args...]

	# args
	(( $# > 0 )) || { errcho 'no arguments given'; return $(( exitcode_ERROR_IN_ARGUMENTS )); }
	local -r cmd="${1-}"
	local -r args="${*:2}"

	# consts
	local -r session_name="$cmd"
	local -r -i retries_limit=100
	local -r -i scrollback_buffer_lines=200

	# vars
	local -i retries_counter
	local -i function_exitcode=$(( exitcode_OK ))

	# code
	if ! which "$cmd" > /dev/null; then
		errcho "cannot locate command '$cmd' to run in the screen session"
		return $(( exitcode_ERROR_CMD_NOT_FOUND ))
	fi

	retries_counter=1
	until is_screen_session_exist "$session_name"; do
		if (( retries_counter > 1 )); then
			{ sleep 0.5 || usleep 500000 || sleep 1; } 2> /dev/null # only integer sleep on BusyBox
			screen -wipe # > /dev/null # let's debug
		#else
			# skip 'sleep' at the first iteration
		fi

		if (( DEBUG )); then
			screen -dm -S "$session_name" -h "$scrollback_buffer_lines" "$cmd" $args
		else
			screen -dm -S "$session_name" -h "$scrollback_buffer_lines" "$cmd" $args > /dev/null
		fi

		(( retries_counter == 2 )) && printf '\n'

		if (( retries_counter % 10 == 0 )); then
			if [[ -t 1 ]]; then
				printf '\rWaiting for %s screen session to start, attempt #%d... ' "$session_name" "$retries_counter"
			else
				printf 'Waiting for %s screen session to start, attempt #%d... \n' "$session_name" "$retries_counter"
			fi
		fi

		if (( retries_counter >= retries_limit )); then
			[[ -t 1 ]] && printf '\n'
			errcho "'$session_name' hasn't been started. Weird..."
			# debug
			ls -ALl /var/run/screens
			screen -ls
			ps w | grep "[${session_name::1}]${session_name:1}" # surround the first char in [b]rackets, neat
			#
			(( function_exitcode = exitcode_ERROR_SOMETHING_BAD_HAPPEN ))
			break
		fi

		(( retries_counter++ ))
	done

	return $(( function_exitcode ))
}

function screen_stop_session {
	# Usage: screen_stop_session 'session name' -> $?

	# args
	(( $# > 0 )) || { errcho 'no arguments given'; return $(( exitcode_ERROR_IN_ARGUMENTS )); }
	local -r session_name="${1-}"

	# consts
	local -r -i retries_limit=100

	# vars
	local -i retries_counter
	local -i function_exitcode=$(( exitcode_OK ))

	# code
	retries_counter=1
	while is_screen_session_exist "$session_name"; do
		if (( retries_counter > 1 )); then
			{ sleep 0.5 || usleep 500000 || sleep 1; } 2> /dev/null # only integer sleep on BusyBox
		#else
			# skip 'sleep' at the first iteration
		fi

		if (( DEBUG )); then
			screen -S "$session_name" -X quit
		else
			screen -S "$session_name" -X quit > /dev/null
		fi

		(( retries_counter == 2 )) && printf '\n'

		if (( retries_counter % 10 == 0 )); then
			if [[ -t 1 ]]; then
				printf '\rWaiting for %s screen session to stop, attempt #%d... ' "$session_name" "$retries_counter"
			else
				printf 'Waiting for %s screen session to stop, attempt #%d... \n' "$session_name" "$retries_counter"
			fi
			rm -rf /var/run/screens/*."$session_name"
			screen -wipe
		fi

		if (( retries_counter >= retries_limit )); then
			[[ -t 1 ]] && printf '\n'
			errcho "cannot stop '$session_name' in $retries_limit attempts. Zombie screen session?"
			{
				# debug
				ls -ALl /var/run/screens
				screen -ls
				ps w | grep "[${session_name::1}]${session_name:1}" # surround the first char in [b]rackets, neat
			} | tee >( message warn 'agent screen session goes zombie, please contact support (and do not erase this message)' payload )
			#
			(( function_exitcode = exitcode_ERROR_SOMETHING_BAD_HAPPEN ))
			break
		fi

		(( retries_counter++ ))
	done

	return $(( function_exitcode ))
}

# functions: agent

function agent_start {
	# args
	local -r message_mode="${1-}"

	# code
	if ! is_screen_session_exist 'agent'; then
		echo -n "${script_basename}> Starting agent... "
		screen_start_session 'agent' && echo 'Started.' || printf '\n%s: %s\n' "$script_basename" 'Session starting error'
	else
		if [[ $message_mode != '--quiet-ok' ]]; then
			echo "${script_basename}: Agent is already running"
		fi
	fi
}

function agent_stop {
	if is_screen_session_exist 'agent'; then
		echo -n "${script_basename}> Stopping agent... "
		screen_stop_session 'agent' && echo 'Stopped.' || printf '\n%s: %s\n' "$script_basename" 'Session stopping error'
	else
		echo "${script_basename}: Agent hasn't been running"
	fi
}

function agent_restart {
	echo "${script_basename}> Restarting agent"
	agent_stop
	agent_start
}


# global consts

declare -r own_log="/tmp/${script_basename}.log"
declare -r -i exitcode_OK=0
declare -r -i exitcode_ERROR_IN_ARGUMENTS=128
declare -r -i exitcode_ERROR_CMD_NOT_FOUND=100
declare -r -i exitcode_ERROR_SOMETHING_BAD_HAPPEN=1
declare -r -i script_exitcode_OK_RUNNING=0
declare -r -i script_exitcode_OK_NOT_RUNNING_STARTED=1


# global vars

# exitcode=0 - has been running
# exitcode=1 - has not been running, starting
declare -i script_exitcode


# global exports

[[ ! "$PATH" =~ (^|:)/hive/bin:/hive/sbin(:|$) ]] && export PATH="$PATH:/hive/bin:/hive/sbin"
export LD_LIBRARY_PATH=/hive/lib

# traps

trap -- 'errcho "SIGHUP received, ignoring..."' SIGHUP


# main()

is_screen_session_exist 'agent'; script_exitcode=$?

case "${1-}" in
	'start')						agent_start				;;
	'stop')							agent_stop				;;
	'restart')						agent_restart			;;
	'dontattach' | 'daemonize')		agent_start --quiet-ok	;;

	'log')
		if touch "$own_log" 2> /dev/null; then
			screen -S agent -X -p0 hardcopy -h "$own_log"
			if [[ -f "$own_log" ]]; then
				{ grep -v -m 1 '^$' && cat; } < "$own_log" # remove blank lines from beginning, https://stackoverflow.com/a/19775127
				rm "$own_log"
			fi
			script_exitcode=0
		else
			errcho "cannot write log to $own_log (/tmp is read-only?), exiting..."
			script_exitcode=1
		fi
	;;

	'attach' | *)
		agent_start
		screen_attach_to_session 'agent'
	;;
esac

exit $(( script_exitcode ))
