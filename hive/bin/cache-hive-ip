#!/hive/sbin/bash
##!/usr/bin/env ash


#
# Copyright (C) 2016-2020  Hiveon
# Distributed under GNU GENERAL PUBLIC LICENSE 2.0
# License information can be found in the LICENSE file or at https://github.com/minershive/hiveos-asic/blob/master/LICENSE.txt
#
# Linted by shellcheck 0.3.7
#


readonly script_mission='Client for ASICs: Cache Hive API Server address'
readonly script_version='0.1.6'
readonly script_basename="$( basename "$0" )"


# !!! bash strict mode, no unbound variables

set -o nounset


# functions

function print_script_version {
	echo -e "${YELLOW-}${script_mission}, version ${script_version}${NOCOLOR-}"
	echo
}

function gethostbyname {
	#ent=`getent ahosts $HOST | grep -m 1 STREAM | sed -E 's/(\w+)\s+STREAM\s+(.*)/\1 \2/'`
	#ping -c1 -t1 -W0 www.example.com &>/dev/null && ping -c1 -t1 -W0 www.example.com 2>&1 | tr -d '():' | awk '/^PING/{print $3}'
	#ping -q -c1 -t1 your_host_here | grep -Eo "([0-9]+\.?){4}"
	#nslookup $LINE | awk '/^Address: / { print $1 }'

	# args
	local -r host="$1"

	# vars
	local nslookup_output

	# code
	if nslookup_output="$( nslookup "$host" )"; then
		echo "$nslookup_output"									|
			grep -A 4 Name										|
				sed -n '/\([0-9]\{1,3\}\.\)\{3\}[0-9]\{1,3\}/p'	|
					tail -1										|
						grep Address							|
							head -n1							|
								awk -F': ' '{print $2}'			|
									awk '{print $1}'
	else
		return 1
	fi
}

function set_hostfile {

	# consts

	local -r abracadabra='MTI3LjAuMC4xCWxvY2FsaG9zdC5sb2NhbGRvbWFpbgkJbG9jYWxob3N0Cgo='

	# code

	case "$ASIC_MODEL" in
		'Antminer S9k'			|\
		'Antminer S9 SE')
			hostfile='/etc/hosts'
		;;

		'Antminer S9'			|\
		'Antminer T17'*			|\
		'Antminer S17'*			|\
		'Antminer X17'*			|\
		'Antminer T9+'*			|\
		'Antminer T9'*			|\
		'Antminer S10'*			|\
		'Antminer S9i'			|\
		'Antminer S9j'			|\
		'Minecenter S9'			|\
		'Antminer S9 Hydro'		|\
		'Antminer E3'			|\
		'Antminer '				|\
		'Antminer S9 (vnish'*	|\
		'Antminer S9'*			|\
		'Antminer S11'*)
			hostfile='/tmp/hosts'
			#default for hiveon
			#127.0.0.1       localhost.localdomain           localhost
			#
			if [[ $( md5sum /etc/hosts | awk '{print $1}' ) != '27acad957c7cded40cd6ac50d23ddc66' ]]; then
				if which base64 > /dev/null; then
					base64 -d <<< "$abracadabra" > /etc/hosts
				elif which openssl > /dev/null; then
					openssl base64 -d  <<< "$abracadabra" > /etc/hosts 2> /dev/null
				fi
			fi
		;;

		*)
			hostfile='/etc/hosts'
		;;
	esac
}


# global sources

. /hive/bin/asic-model


# global exports

#export PATH="./:/hive/bin:/hive/sbin:$PATH"


# global consts

declare -r RIG_CONF='/hive-config/rig.conf'


# global vars

declare hostfile=''


# main

print_script_version
set_hostfile

if [[ ! -w "$hostfile" ]]; then
	echo "$hostfile is read-only, exiting..."
	exit 1
fi

#add host ip
#/hive/bin/hostname-check

if [[ -f "$RIG_CONF" ]]; then
	source "$RIG_CONF"
	if [[ -z "$HIVE_HOST_URL" ]]; then
		echo "HIVE_HOST_URL is empty"
		exit 1
	fi
else
	echo "No $RIG_CONF"
	exit 1
fi

#Resolve host and write it to /etc/hosts

#HOST="hiveos.farm"
#HOST="$( awk -F'/' '{print $3}' <<< "$HIVE_HOST_URL" )" # get domain name without trailing slash
IFS=/ read -r _ _ HOST <<< "$HIVE_HOST_URL" # get domain name without trailing slash (and without awk)

if [[ -z "$HOST" ]]; then
	echo "Unable to parse hostname from $HIVE_HOST_URL"
	exit 1
fi

for i in {1..30}; do
	if ip_address="$( gethostbyname "$HOST" )" && [[ -n "$ip_address" && "$ip_address" != '127.0.0.1' ]]; then
		break
	fi
	echo "Waiting for nslookup... Attempt #$i"
	sleep 2
done

if [[ -z "$ip_address" ]]; then
	echo "Unable to resolve $HOST"
	[[ -f /hive-config/hosts ]] && cp -rf /hive-config/hosts "$hostfile"
#	message warn "Unable to resolve $HOST"
	exit 0
fi

old_hosts="$( < "$hostfile" )"
old_hosts+=$'\n'

new_hosts="# DO NOT EDIT. All changes will be overwritten by $script_basename

127.0.0.1 localhost.localdomain localhost

# HIVE HOST CACHE BEGIN
$ip_address $HOST
"

# mind the flash memory wear ant tear
if [[ "$old_hosts" != "$new_hosts" ]]; then
	echo "Writing DNS resolve '$ip_address' to $hostfile"
	echo "$new_hosts" > "$hostfile"
	sync
else
	echo "Server IP has not been changed, $hostfile update skipped"
fi

if ! cmp -s "$hostfile" /hive-config/hosts; then
	cp -rf "$hostfile" /hive-config/hosts
	sync
fi
