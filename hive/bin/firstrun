#!/hive/sbin/bash


#
# Copyright (C) 2016-2020  Hiveon
# Distributed under GNU GENERAL PUBLIC LICENSE 2.0
# License information can be found in the LICENSE file or at https://github.com/minershive/hiveos-asic/blob/master/LICENSE
#


readonly script_mission='Client for ASICs: Your First Run'
readonly script_version='0.1.1'
readonly script_basename="$( basename "$0" )"
readonly script_debug=0


# functions

print_script_version() {
	echo -e "${YELLOW-}${script_mission}, version ${script_version}${NOCOLOR-}"
	echo
}

function set_BRANDING_LOGO {
	BRANDING_LOGO=$( cat <<-EOF
		 _______ _______ ___ ___ _______
		|   |   |_     _|   |   |    ___|
		|       |_|   |_|   |   |    ___|
		|___|___|_______|\_____/|_______|
		EOF
	)
	BRANDING_LOGO="${BYELLOW}${BRANDING_LOGO}${NOCOLOR}"
}


# read, check (rough sanity check) and set HIVE_HOST_URL
# 
# todo: connectivity test
# todo: valid api answer test (curl -v $url/worker/api?a=b)

function read_HIVE_HOST_URL_from_RIG_CONF {
	#
	# read_HIVE_HOST_URL_from_RIG_CONF
	#
	# output: $HIVE_HOST_URL from RIG_CONF, got it?
	# exit code: if success
	#
	#
	local HIVE_HOST_URL_from_RIG_CONF

	if [[ -s "$RIG_CONF" ]]; then
		HIVE_HOST_URL_from_RIG_CONF="$( source "$RIG_CONF"; echo "$HIVE_HOST_URL" )"
		echo "$HIVE_HOST_URL_from_RIG_CONF"
	fi

	[[ -n "$HIVE_HOST_URL_from_RIG_CONF" ]] # set exit code
}

function sanitize_HIVE_HOST_URL {
	(( $# < 1 || $# > 2 )) && echo "Error in ${FUNCNAME}(): Invalid number of arguments" 1>&2
	#
	# sanitize_HIVE_HOST_URL 'url_to_sanitize' ['fallback_url'] -> 'sanitized_url'
	#
	# exit code: is_fallback_happen
	#
	local -r url_to_sanitize="$1"
	local -r fallback_url="${2:-${HIVE_HOST_URL_default}}"
	local -r valid_url_RE='^(http|https)://[[:alnum:]\.\-]+(:[[:digit:]]{1,5})?' # first line w/o control chars (only alnum|punct), starting with http(s)://
	local sanitized_url=''
	local -i is_fallback_happen=0

	if [[ $url_to_sanitize =~ $valid_url_RE ]]; then
		# URL seems ok, use it
		sanitized_url="$BASH_REMATCH"
		is_fallback_happen=0
	else
		# something wrong, falling back to default
		sanitized_url="$fallback_url"
		is_fallback_happen=1
	fi

	echo "$sanitized_url"

	return $(( is_fallback_happen ))
}

function validate_and_set_HIVE_HOST_URL {
	(( $# != 1 )) && echo "Error in ${FUNCNAME}(): Invalid number of arguments" 1>&2
	#
	# validate_and_set_HIVE_HOST_URL 'url_to_validate_and_set'
	#
	# sets: $HIVE_HOST_URL
	#
	local -r url_to_validate_and_set="$1"
	local validated_url=''

	if validated_url="$( sanitize_HIVE_HOST_URL "$url_to_validate_and_set" )"; then
		echo "URL seems ok. Hive Server URL have been set to $validated_url"
	else
		echo "Something wrong with '$url_to_validate_and_set'. Falling back to default: $validated_url"
	fi
	HIVE_HOST_URL="$validated_url"
}

function read_url {
	while true; do
		read url
		[[ -z "$url" ]] && break
		if [[ $url =~ ^(http|https)://.+$ ]]; then
			HIVE_HOST_URL="$url"
			echo -e "New server URL: ${YELLOW}$HIVE_HOST_URL${NOCOLOR}"
			break
		fi
		echo "Invalid URL: '$url'"
	done
}

function read_id {
	while true; do
		echo -n 'RIG ID: '
		read id
		echo "$id" | grep -qE '^[0-9]+$' && break
		echo "Invalid input: '$id'"
	done
}

function read_passwd {
	while true; do
		echo -n 'Password: '
		read passwd
		#any chars no spaces
		#[[ ! $passwd =~ [[:blank:]] ]] && break
		#[[ ! "$passwd" =~ \"|\'|[[:blank:]] ]] && break #if does not match \" or \' space - break cycle
		echo "$passwd" | grep -qE "\"|'|\s" || break
		echo "Invalid input: '$passwd'"
	done
}


# global consts

declare -r HIVE_HOST_URL_file='/config/HIVE_HOST_URL'
declare -r WHITELABEL_HOST_URL_file_in_FW='/etc/hive-url'
declare -r WHITELABEL_HOST_URL_file_in_NVRAM='/config/hive-url'
declare -r HELLO_OK='/tmp/.hive-hello-ok'
declare -r RIG_CONF='/hive-config/rig.conf'


# global vars

declare BRANDING_LOGO


# global exports

[[ ! "$PATH" =~ (^|:)/hive/bin:/hive/sbin(:|$) ]] && export PATH="$PATH:/hive/bin:/hive/sbin" # add only if not exist
export LD_LIBRARY_PATH=/hive/lib


# main

print_script_version

#Checks if config exists, ask for rig if no config found

mkdir -p '/hive-config'

[[ -t 1 ]] && source colors

#FARM_HASH=
FORCE=0
if [[ $1 == '-f' || $1 == '--force' ]]; then
	echo "Forcing reconfig"
	FORCE=1
elif [[ -n "$1" ]]; then
	FARM_HASH="$1"
#	if [[ $2 == '-f' ]]; then
	FORCE=1
#	fi
fi



#
# 1. try to get a whitelabel default from a config file embedded in firmware
# WARNING: no fallback procedure defined. URL must be correct.
#
if [ -s "$WHITELABEL_HOST_URL_file_in_FW" ]; then
	HIVE_HOST_URL_default="$( < "$WHITELABEL_HOST_URL_file_in_FW" )"
	echo "Default HIVE_HOST_URL found in firmware: $WHITELABEL_HOST_URL_file_in_FW"
else
	HIVE_HOST_URL_default='http://api.hiveos.farm'
fi

#
# 2. try to get a whitelabel default from a config file written in NVRAM
# WARNING: no fallback procedure defined. URL must be correct.
#
if [ -s "$WHITELABEL_HOST_URL_file_in_NVRAM" ]; then
	HIVE_HOST_URL_default="$( < "$WHITELABEL_HOST_URL_file_in_NVRAM" )"
	echo "Default HIVE_HOST_URL found in NVRAM: $WHITELABEL_HOST_URL_file_in_NVRAM"
else
	HIVE_HOST_URL_default='http://api.hiveos.farm'
fi

echo "Default HIVE_HOST_URL set to $HIVE_HOST_URL_default"

#
# 3. try to read it from environment
#
if [[ -n "$HIVE_HOST_URL" ]]; then
	echo -n 'HIVE_HOST_URL variable is set, checking... '
	validate_and_set_HIVE_HOST_URL "$HIVE_HOST_URL"
else
	# then try to read from config
	if ! HIVE_HOST_URL="$( read_HIVE_HOST_URL_from_RIG_CONF )"; then
		HIVE_HOST_URL="$HIVE_HOST_URL_default"
		echo "HIVE_HOST_URL variable is not set. Using default Hive Server URL: $HIVE_HOST_URL"
	else
		echo "HIVE_HOST_URL found in $RIG_CONF. Using Hive Server URL: $HIVE_HOST_URL"
	fi
fi

#
# 4. try to read it from file. top prio.
#
if [[ -s "$HIVE_HOST_URL_file" ]]; then
	echo -n "File '$HIVE_HOST_URL_file' found. It has priority over the others. Checking... "

	HIVE_HOST_URL_from_file="$( < "$HIVE_HOST_URL_file" )"

	validate_and_set_HIVE_HOST_URL "$HIVE_HOST_URL_from_file"
	rm "$HIVE_HOST_URL_file"
fi


set_BRANDING_LOGO

if [[ ! -f "$RIG_CONF" || $FORCE -eq 1 ]]; then
#	selfupgrade

	if [[ -z "$FARM_HASH" ]]; then
		message=$( cat <<-EOF
			${BRANDING_LOGO}
			$CYAN
			Welcome to Miners Hive.
			This is your first boot, no config found at "$RIG_CONF".
			Please add your rig in your profile on the web, set the name and password for it.
			Then get rig id and give it to me.

			$NOCOLOR
			EOF
		)
	else
		message=$( cat <<-EOF
			${BRANDING_LOGO}
			$CYAN
			Adding worker to your farm...${NOCOLOR}
			Hive Farm Hash (FARM_HASH) is '${FARM_HASH:-<not set>}'
			Hive Server URL (HIVE_HOST_URL) is '${HIVE_HOST_URL:-<not set>}'

			$NOCOLOR
			EOF
		)
	fi
	echo -e "$message"

elif [[ ! -f "$HELLO_OK" ]]; then
	message=$( cat <<-EOF
		${BRANDING_LOGO}
		$YELLOW
		Config "$RIG_CONF" exists but during boot the connection to hive server failed.
		Either the server or your network is temporary down.
		If you have changed the password for this rig, then you need to enter credentials again.$NOCOLOR
		Run ${CYAN}hello${NOCOLOR} to try again. Or run ${CYAN}firstrun -f${NOCOLOR} to enter new ID and password.
		$NOCOLOR
		EOF
	)
	echo -e "$message"

	sleep 5

	echo "Trying to say hello again...";
	hello

	exit 0
else
	exit 0
fi


# check/set HIVE_HOST_URL, RIG_ID, RIG_PASSWD

url=
id=
passwd=

while true; do
	if [[ -z "$FARM_HASH" ]]; then
		echo -e "Server URL: ${YELLOW}$HIVE_HOST_URL${NOCOLOR}"
		echo 'Press ENTER if OK (or type a new one)'
		read_url
		read_id
		read_passwd

		cat > "$RIG_CONF" <<-FILEEOF
			HIVE_HOST_URL="$HIVE_HOST_URL"
			RIG_ID="$id"
			RIG_PASSWD="$passwd"
			FILEEOF
	else #$FARM_HASH is set
		cat > "$RIG_CONF" <<-FILEEOF
			HIVE_HOST_URL="$HIVE_HOST_URL"
			FARM_HASH="$FARM_HASH"
			FILEEOF
	fi

	sync
	echo
	echo "Config written to '$RIG_CONF'"

	#try to connect
	sleep 5
	hello restartminer

	if (( $? == 0 )); then
		#Apply OC if configs are available
		#[[ -f $AMD_OC_CONF ]] && amd-oc-safe
		#[[ -f $NVIDIA_OC_CONF ]] && nvidia-oc-log

		echo
		echo -e "${BGREEN}Login OK. Happy mining!${NOCOLOR}"
		echo

		exit 0
	fi

	echo -e "${RED}Sorry, id and password did not work, check and try again${NOCOLOR}\n"

	if [[ -n "$FARM_HASH" ]]; then
		#break while loop
		exit 1
	fi
done
