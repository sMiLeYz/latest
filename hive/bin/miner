#!/hive/sbin/bash


#
# Copyright (C) 2016-2020  Hiveon
# Distributed under GNU GENERAL PUBLIC LICENSE 2.0
# License information can be found in the LICENSE file or at https://github.com/minershive/hiveos-asic/blob/master/LICENSE.txt
#


readonly script_mission='Client for ASICs: Miner controller'
readonly script_version='1.1.4'
readonly script_basename="$( basename "$0" )"
source /hive/bin/hive-functions.sh || { echo 'ERROR: /hive/bin/hive-functions.sh not found'; exit 1; }


# functions

function script_usage {
	echo -e "Usage: ${CYAN}$script_basename [start|stop|restart|config|config-gen]${NOCOLOR}"
	echo -e "       ${CYAN}$script_basename log [kernel|status|tuning|watchdog|all]${NOCOLOR} - display a corresponding log"
	echo -e "       ${CYAN}$script_basename tuning${NOCOLOR}                                  - deprecated, please do not use"
	echo
	echo -e "If you run ${CYAN}$script_basename${NOCOLOR} without parameters the miner screen will be tried to resume"
}

# config functions

function generate_config {
	/hive/bin/asicminer-config
}

function print_config {
	# shows miner config
	if [[ -n "$CONFIG_PATH" ]]; then
		tail_any_log "$CONFIG_PATH"
	else
		echo "Unknown model $ASIC_MODEL"
	fi
}

# start/stop/restart functions

function miner_start {
	echo -e "Starting ${CYAN}$MINER${NOCOLOR} - ${CYAN}$THIS_MINER_NAME${NOCOLOR}"
	if [[ -f '/sbin/watchdog_restart.pl' ]]; then
		# S9/T9 Hiveon
		generate_config
		rm -f /tmp/norespawn
	elif [ -f '/www/pages/cgi-bin/resume_miner.cgi' ]; then
		# S17/T17 Hiveon
		generate_config
		sh /www/pages/cgi-bin/resume_miner.cgi
	elif [[ "$ASIC_MODEL" =~ 'Toddminer C1' ]]; then
		generate_config
		/hive/bin/todd_api mstart
#		/home/sm/miner/build/miner.sh &
	else
		for i in {1..15}; do
			test_miner="$( ps | grep -e 'bmminer' -e 'cgminer' -e 'single-board-test' | grep -v -e 'grep' -e 'systemctl' )"
			if [[ -z "$test_miner" ]] ; then
				generate_config
				screen -d > /dev/null
				if [[ $ASIC_MODEL =~ '.g19' || $ASIC_MODEL == 't3.soc' ]]; then
					systemctl start cgminer.service
				elif [[ $ASIC_MODEL == 't3h+.soc' || $ASIC_MODEL == 't3+.soc' || $ASIC_MODEL == 't2th+.soc' || $ASIC_MODEL == 't2thf+.soc' || $ASIC_MODEL == 't2thl+.soc' || $ASIC_MODEL == 't2th.soc' || $ASIC_MODEL == 't2tz.soc' || $ASIC_MODEL == 't2thm.soc' || $ASIC_MODEL == 't2thf.soc' || $ASIC_MODEL == 't2t+.soc' || $ASIC_MODEL == 't2ts.soc' || $ASIC_MODEL == 't2ti.soc' || $ASIC_MODEL == 't2t.soc' ]]; then
					systemctl start cgminer.service
					#timeout -t 600 /hive/bin/inno_api updatePools
					timeout -t 600 /hive/bin/inno_api updateFanspeed
					timeout -t 600 /hive/bin/inno_api setAutoTune
				elif [[ $ASIC_MODEL =~ 'Zig Z1' ]]; then
					break
				elif [[ $ASIC_MODEL == 'T4.G19' ]]; then
					python3.4 /home/inno_tools/start_miner.py &
				else
					nohup "/etc/init.d/$THIS_MINER_NAME.sh" start > /dev/null 2>&1 &
				fi
				break
			fi
			snore 1
		done
	fi
	echo
}

function miner_stop {
	echo -e "Stopping ${CYAN}$MINER${NOCOLOR} - ${CYAN}$THIS_MINER_NAME${NOCOLOR}"
	if [[ -f '/sbin/watchdog_restart.pl' ]]; then
		# S9/T9 Hiveon
		echo 'ok' > /tmp/norespawn
	elif [[ -f '/www/pages/cgi-bin/stop_miner.cgi' ]]; then
		# S17/T17 Hiveon
		sh /www/pages/cgi-bin/stop_miner.cgi
	else
		if [[ $ASIC_MODEL =~ '.g19' || $ASIC_MODEL == 't3.soc' || $ASIC_MODEL == 't3h+.soc' || $ASIC_MODEL == 't3+.soc' || $ASIC_MODEL == 't2th+.soc' || $ASIC_MODEL == 't2thf+.soc' || $ASIC_MODEL == 't2thl+.soc' || $ASIC_MODEL == 't2th.soc' || $ASIC_MODEL == 't2tz.soc' || $ASIC_MODEL == 't2thm.soc' || $ASIC_MODEL == 't2thf.soc' || $ASIC_MODEL == 't2t+.soc' || $ASIC_MODEL == 't2ts.soc' || $ASIC_MODEL == 't2ti.soc' || $ASIC_MODEL == 't2t.soc' ]]; then
			systemctl stop cgminer.service
		elif [[ $ASIC_MODEL =~ 'Zig Z1' ]]; then
			pidof miner | xargs kill -9
		elif [[ $ASIC_MODEL == 'T4.G19' ]]; then
			killall innominer_T4
		elif [[ $ASIC_MODEL =~ 'Toddminer C1' ]]; then
			/hive/bin/todd_api mstop
		else
			"/etc/init.d/$THIS_MINER_NAME.sh" stop
		fi
	fi
}

function miner_restart {
	echo -e "${YELLOW}Restarting miner${NOCOLOR}" #can be different on miner change
	if [[ -f '/sbin/watchdog_restart.pl' ]]; then
		# S9/T9 Hiveon
		generate_config
		rm -f /tmp/norespawn
		echo 'ok' > /config/restart
	elif [ -f '/www/pages/cgi-bin/resume_miner.cgi' ]; then
		# S17/T17 Hiveon
		generate_config
		sh /www/pages/cgi-bin/resume_miner.cgi
	elif [ -f '/www/pages/cgi-bin/restart_miner.cgi' ]; then
		generate_config
		sh /www/pages/cgi-bin/restart_miner.cgi
	elif [[ "$ASIC_MODEL" =~ 'Toddminer C1' ]]; then
		miner_start
	else
		miner_stop
		miner_start
	fi
}


# log processing functions

function print_default_log {
	# code
	if [[ -n "$HIVEON_VER" ]]; then
		sh /www/pages/cgi-bin/get_kernel_log.cgi # | tail -n "$lines_to_tail"
	else
		if [[ "$ASIC_MODEL" =~ '.g19' ]]; then
			journalctl -n "$lines_to_tail"
		elif [[ "$ASIC_MODEL" =~ 'Toddminer C1' ]]; then
			/hive/bin/todd_api mlog
		else
			if [[ ! -f "$LOG_PATH" ]]; then
				echo "Log $LOG_PATH does not exist yet"
			elif [[ "$( get_file_size_in_bytes "$LOG_PATH" )" -le 1 ]]; then #can be 1, empty line
				echo "Log $LOG_PATH is empty"
			else
				tail_any_log "$LOG_PATH"
			fi
		fi
	fi
}

function tail_any_log {
	#
	# tail_any_log [-d] [-r PATTERN] [-s] [-t LINES] ['input_file']
	#
	# -d decorations (header & footer) off
	# -r extended regex pattern
	# -s sort
	# -t tail lines

	# defaults

	local -r -i	is_decoration_DEFAULT=1
	local -r -i	is_from_file_DEFAULT=1
	local -r -i	is_regex_DEFAULT=0
	local -r -i	is_sort_DEFAULT=0
	local -r -i	is_tail_DEFAULT=0

	# options

	local -i	is_decoration="$is_decoration_DEFAULT"
	local -i	is_from_file="$is_from_file_DEFAULT"
	local -i	is_regex="$is_regex_DEFAULT"
	local -i	is_sort="$is_sort_DEFAULT"
	local -i	is_tail="$is_tail_DEFAULT"
	local -i	tail_lines=
	local		regex_pattern=

	# vars

	local -i now last_modified_time_in_seconds file_size
	local option input_file last_modified_time_human_readable last_modified_time_dhms

	# arguments parsing

	while getopts ':dr:st:' option; do
		case "$option" in
			d)	is_decoration=0				;;
			r)	is_regex=1
				regex_pattern="$OPTARG"		;;
			s)	is_sort=1					;;
			t)	is_tail=1
				tail_lines="$OPTARG"		;;
		esac
	done
	shift $(( OPTIND - 1 ))
	local -r input_file="${1-}"

	# code

	if [[ -z "$input_file" || "$input_file" == '-' ]]; then
		is_from_file=0
	fi

	if (( is_from_file )); then
		if [[ -r "$input_file" ]]; then
			file_size="$( get_file_size_in_bytes "$input_file" )"
			if (( is_decoration )); then
				last_modified_time_in_seconds="$( get_file_last_modified_time_in_seconds "$input_file" )"
				now="$( get_current_system_time_in_seconds )"
				(( timespan_between_now_and_last_modified = now - last_modified_time_in_seconds ))
				last_modified_time_dhms="$( format_date_in_seconds "$timespan_between_now_and_last_modified" 'dhms' )"
				last_modified_time_human_readable="$( format_date_in_seconds "$last_modified_time_in_seconds" )"

				header="File ${WHITE}$input_file${NOCOLOR}"
				(( is_tail )) && header+=", last ${WHITE}${tail_lines}${NOCOLOR} lines"
				(( is_regex )) && header+=", filtered by '${WHITE}$regex_pattern${NOCOLOR}'"

				echo -e "${header}:"
				echo
			fi

			if (( file_size <= 1 )); then
				echo "$input_file is empty"
			fi
		else
			echo "$input_file not found or not readable"
			return $(( exitcode_ERROR_NOT_FOUND ))
		fi
	fi

	# tremble before awesome 4-stage conditional pipe!
	iif_pipe "$is_from_file" cat "$input_file" |
		iif_pipe "$is_regex" grep -E -e "$regex_pattern" |
			iif_pipe "$is_sort" sort -us |
				iif_pipe "$is_tail" tail -n "$tail_lines"

	if (( is_from_file )); then
		if (( is_decoration )); then
			echo
			echo -e "${WHITE}$last_modified_time_human_readable${NOCOLOR} file was last modified ${WHITE}$last_modified_time_dhms${NOCOLOR} ago"
		fi
	fi
}

function print_kernel_log {
	#
	# Usage: print_kernel_log [--print-precise-timestamps]
	#
	# print whole dmesg
	# try to transform default dmesg's seconds_from_boot timestamp to the more human-readable form

	# args
	local -r parameter="$1"

	# consts
	local -r dmesg_RE='^\[\ *([0-9]+)\.([0-9]{6})\]\ (.*)'
	#                    [   47.973210] fpga mem virtual address is 0xd2000000

	# vars
	local raw_line log_message millisecond_part='000000'
	local -i now uptime timestamp seconds_from_start line_counter
	local -i same_millisecond_FLAG=0

	# code
	if uptime="$( get_system_uptime_in_seconds )" && now="$( get_current_system_time_in_seconds )"; then
		dmesg | while IFS= read -r -t 0.1 raw_line; do
			if [[ "$raw_line" =~ $dmesg_RE ]]; then
				seconds_from_start="${BASH_REMATCH[1]}"
				if [[ "${BASH_REMATCH[2]}" == "$millisecond_part" ]]; then
					same_millisecond_FLAG=1
					(( line_counter++ ))
				else
					same_millisecond_FLAG=0
					(( line_counter = 0 ))
				fi
				millisecond_part="${BASH_REMATCH[2]}"
				log_message="${BASH_REMATCH[3]}"
				(( timestamp = now - uptime + seconds_from_start ))

				if [[ "$parameter" == '--print-precise-timestamps' ]]; then
					if (( same_millisecond_FLAG )); then
						printf '%(%F %T)T.%s#%03u %s\n' "$timestamp" "$millisecond_part" "$line_counter" "$log_message"
					else
						printf '%(%F %T)T.%s %s\n' "$timestamp" "$millisecond_part" "$log_message"
					fi
				else
					printf '%(%F %T)T %s\n' "$timestamp" "$log_message"
				fi

			else
				echo "$raw_line"
			fi
		done
	else
		dmesg
	fi
}

function print_tune_log {
	local -r tune_log_file_17='/tmp/tune_log.txt'
	local -r tune_log_file_9='/tmp/auto-tune'
	local this_tune_log_script

	if [[ -s "$tune_log_file_17" ]]; then
		cat "$tune_log_file_17"
	elif [[ -s "$tune_log_file_9" ]]; then
		cat "$tune_log_file_9"
	else
		for this_tune_log_script in '/www/pages/cgi-bin/get_auto_tune_log.cgi' '/www/pages/cgi-bin/get_tune_log.cgi'; do
			if [[ -s "$this_tune_log_script" ]]; then
				sh "$this_tune_log_script"
			fi
		done
	fi
}

function tail_tune_log {
	print_tune_log | tail_any_log -t "$lines_to_tail"
}

function tail_miner_status_log {
	local -r miner_status_log_file='/nvdata/miner_status.log'
	tail_any_log -t "$lines_to_tail" "$miner_status_log_file"
}

function tail_watchdog_log {
	local -r watchdog_log_file='/config/watchdog.log'
	tail_any_log -t "$lines_to_tail" "$watchdog_log_file"
}

function collate_all_logs {
	{	# !!! duct tape, should refactor someday
		print_kernel_log --print-precise-timestamps
		print_tune_log
		[[ -s /nvdata/miner_status.log ]]	&& tail -n "$lines_to_tail" /nvdata/miner_status.log
		[[ -s /config/watchdog.log ]]		&& tail -n "$lines_to_tail" /config/watchdog.log
	} |
		tail_any_log -t "$lines_to_tail" -s -r '^[0-9]'
}


# consts

declare -r -i lines_to_tail=300
declare -r RIG_CONF_default='/hive-config/rig.conf'
declare -r RIG_CONF="${RIG_CONF:-$RIG_CONF_default}" # for ASIC emulator: set to default only if RIG_CONF variable is empty
declare -r WALLET_CONF='/hive-config/wallet.conf'


# sources

source colors
source asic-model


# main

if [[ ! -f "$RIG_CONF" ]]; then
	echo -e "${YELLOW}Config file $RIG_CONF not found${NOCOLOR}"
	# don't have to exit -- we simply don't have a config atm
	#exit 1
else
	source "$RIG_CONF"
fi

if [[ ! -f "$WALLET_CONF" ]]; then
	echo -e "${YELLOW}Wallet file $WALLET_CONF not found${NOCOLOR}"
else
	source "$WALLET_CONF"
fi

if [[ -z "$MINER" ]]; then
	MINER='asicminer'
	echo -e "${YELLOW}No miner set in config, will use default ${CYAN}\"asicminer\"${NOCOLOR}"
fi

# default rig.conf (before applying an any Flight Sheet) contains claymore as a defalt miner
if [[ "$MINER" != 'asicminer' ]]; then
	echo -e "${YELLOW}To start mining, you only have to apply a Flight Sheet${NOCOLOR}"
	message warn 'To start mining, you only have to apply a Flight Sheet'
	exit 1
fi

case "$1" in
	'config')			print_config		;;
	'config-gen')		generate_config		;;

	'kernel-log')		print_kernel_log	;;	# deprecated

	'log')
		case "$2" in
			'all')			collate_all_logs					;;
			'kernel')		print_kernel_log					;;
			'status')		tail_miner_status_log				;;
			'tuning')		tail_tune_log						;;
			'watchdog')		tail_watchdog_log					;;
			'file')			# !!! duct tape
							# probably improve it by adding --file option for any of miner logs?
							# ...or carry over all the log handling to the brand new stand-alone log facility (it's better from the architectural point of view)
							print_default_log > /tmp/kernel.log
							message file /tmp/kernel.log
							rm /tmp/kernel.log					;;
			*)				print_default_log					;;
		esac
	;;

	'restart')
		miner_restart
	;;

	'start')
		if [[ ! -s /config/stop-mining ]]; then
			miner_start
		else
			chain_to_repair="$( < /config/stop-mining )"
			valid_chain_number_RE='^[0-9]+$'
			[[ "$chain_to_repair" =~ $valid_chain_number_RE ]] && chain_to_repair="#$(( chain_to_repair - 1 )) " # chain numbers in the file are 1-based

			rm -f /config/stop-mining
			miner_restart
			echo -e "${YELLOW}Safe mode override: mining resumed. Please repair chain ${chain_to_repair}ASAP${NOCOLOR}"
			message ok "Safe mode override: mining resumed. Please repair chain ${chain_to_repair}ASAP" --silent
		fi
	;;

	'stop')
		miner_stop
	;;

	'tuning')
		# deprecated. please use more consistent 'miner log tuning'
		tail_tune_log
	;;

	'')
		print_script_version
		screen -x -S bmminer > /dev/null ||
			screen -x -S cgminer /dev/null ||
				echo 'No miner screen running'
	;;

	'-h'|'--help'|*)
		print_script_version
		script_usage
	;;
esac
