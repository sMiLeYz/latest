#!/hive/sbin/bash


#
# Copyright (C) 2016-2020  Hiveon
# Distributed under GNU GENERAL PUBLIC LICENSE 2.0
# License information can be found in the LICENSE file or at https://github.com/minershive/hiveos-asic/blob/master/LICENSE.txt
#


# functions

function seconds2dhms {
	# Usage: seconds2dhms 'time_in_seconds' ['delimiter']
	# Renders time_in_seconds to 'XXd XXh XXm XXs' string

	# args
	local -i -r time_in_seconds="${1#-}" # strip sign, get abs()
	local -r delimiter_DEFAULT=' '
	local -r delimiter="${2-${delimiter_DEFAULT}}"

	# vars
	local -i days hours minutes seconds

	# code
	((
		days = time_in_seconds / 60 / 60 / 24,
		hours = time_in_seconds / 60 / 60 % 24,
		minutes = time_in_seconds / 60 % 60,
		seconds = time_in_seconds % 60
	)) # arithmetic context, GOD I LOVE IT

	(( days ))				&&	printf '%ud%s' "$days" "$delimiter"
	(( hours ))				&&	printf '%uh%s' "$hours" "$delimiter"
	(( minutes ))			&&	printf '%um%s' "$minutes"
	(( ! days && ! hours ))	&&	printf '%s%us' "$delimiter" "$seconds" # seconds only in the first hour
								printf '\n'
}

function netmask_to_cidr {
	# args
	local -r netmask="$1"

	# vars
	local -i cidr=0
	local x
	
	# code
	x="0$( printf '%o' ${netmask//./ } )"

	while (( x > 0 )); do
		(( cidr += x % 2, x >>= 1 ))
	done

	echo "$cidr"
}

function get_uptime_in_dhm {
	# vars
	local -a uptime_raw
	local uptime_dhm

	# code
	uptime_raw=( $( < /proc/uptime ) )
	uptime_dhm="$( seconds2dhms $(( ${uptime_raw/\.} / 100 )) )"
	echo "$uptime_dhm"
}

function get_fs_name {
	# vars
	local fs_name='' fs_RE='' fs_raw=''

	# code
	if [[ -s /hive-config/wallet.conf ]]; then
		fs_RE="### FLIGHT SHEET \"(.*)\" ###"
		fs_raw="$( < /hive-config/wallet.conf )"
		[[ $fs_raw =~ $fs_RE ]]
		fs_name="${BASH_REMATCH[1]}"
	fi

	echo "$fs_name"
}

function pretty_print {
	# consts
	local -r label_color="${LGRAY}"
	local -r variable_ok_color="${BCYAN}"
	local -r variable_empty_color="${DGRAY}"

	# code
	while true; do
		local label="$1"
		local -n variable_name="$2"
		local delimiter="$3"

		printf '%b%s ' "$label_color" "$label"

		if [[ -n "$variable_name" ]]; then
			printf '%b%s' "$variable_ok_color" "$variable_name"
		else
			printf '%b%s' "$variable_empty_color" "[not set]"
		fi

		if [[ -n "$delimiter" ]]; then
			printf ' %b%s ' "${PURPLE}" "$separator"
			shift 3
		else
			printf ' %b\n' "${NOCOLOR}"
			break
		fi
	done
}

function rematch {
	# actually we don't have to use pure bash eh?
	# rematch 'regex' ['string']

	# args
	local -r regex="$1"
	local -r string="${2:-$( </dev/stdin )}" # get from arg or stdin

	# code
	[[ "$string" =~ $regex ]]
	printf '%s\n' "${BASH_REMATCH[@]:1}"
}

function show_mixed_logs {
	# consts
	local -r controller_log='/config/hive-controller.log'
	local -r miner_status_log='/nvdata/miner_status.log'
	local -r error_line_marker='MaRkEr'
	local -r -i error_line_marker_length="${#error_line_marker}"
	local -r -i tail_lines=12

	# vars
	local line=''
	
	# code
	if [[ -s "$controller_log" || -s "$miner_status_log" ]]; then
		echo -e "${DGRAY}-- Last lines from logs --------------------------------------------------------${NOCOLOR}"
	
		{
			if [[ -s "$controller_log" ]]; then
				grep -E '^[0-9]{4}' "$controller_log" | tail -n "$tail_lines"
			fi
			
			if [[ -s "$miner_status_log" ]]; then
				while IFS= read -r line; do
					echo -e "${line}${error_line_marker}"
				done < <( grep -E 'WARN|ERR' "$miner_status_log" | tail -n "$tail_lines" )
			fi
		} | sort -us | {
			while IFS= read -r line; do
				if [[ "${line: -${error_line_marker_length}}" == "${error_line_marker}" ]]; then
					echo -e " ${RED}${line::-${error_line_marker_length}}${NOCOLOR}"
				else
					echo -e " $line"
				fi
			done
		} | tail -n "$tail_lines"
	
		echo -e "${DGRAY}--------------------------------------------------------------------------------${NOCOLOR}"
		echo
	fi
}


# global sources

[[ -s /hive/bin/colors ]] && source /hive/bin/colors
[[ -s /hive/bin/asic-model ]] && source /hive/bin/asic-model
[[ -s /hive-config/rig.conf ]] && source /hive-config/rig.conf


# global consts

declare -r separator='Â·'


# main()

[[ "$ASIC_MODEL" =~ 'Toddminer C1' && ! "$PATH" =~ (^|:)/sbin ]] && export PATH="$PATH:/sbin:/usr/sbin" # add only if not exist

# collect sysinfo
[[ -s /hive/etc/VERSION ]] && agent_release_version="$( < /hive/etc/VERSION )"
[[ -s /hive/etc/build ]] && agent_build_version="$( < /hive/etc/build )"
agent_full_version="${agent_release_version:-[unknown]}-${agent_build_version:-release}"

gateway="$( LANG=C route -n | rematch '[0-9\.]+[ \t]+([0-9\.]+).+UG' )"

if [[ "$ASIC_MODEL" == 'Toddminer C1'* ]]; then
    mac="$( LANG=C ifconfig eth0 | rematch 'ether (.{17})' )"    
    ip="$( LANG=C ifconfig eth0 | grep 'inet ' | awk '{ print $2 }' )"
    netmask="$( LANG=C ifconfig eth0 | grep 'netmask ' | awk '{ print $4 }' )"
    nameserver="$( grep -v -m1 '^#' /etc/resolv.conf | awk '{ print $2 }' )"
else
    mac="$( LANG=C ifconfig eth0 | rematch 'HWaddr (.{17})' )"    
    ip="$( LANG=C ifconfig eth0 | grep 'inet addr:' | cut -d: -f2 | awk '{ print $1 }' )"
    netmask="$( LANG=C ifconfig eth0 | grep 'Mask:' | cut -d: -f4 )"
    nameserver="$( rematch '^nameserver[ \t]+([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+)' < /etc/resolv.conf )"
fi

hostname="$( hostname )"

mac="${mac,,}"
cidr="$( netmask_to_cidr "$netmask" )"
ip_w_cidr="${ip} /${cidr}"

uptime="$( get_uptime_in_dhm )"
local_date="$( date '+%F %T %z' )"

fs_name="$( get_fs_name )"

if [[ -n "$HIVEON_VER" ]]; then
	fw_version="$( sed -n 3p /usr/bin/compile_ver )"
elif [[ -x /home/sm/miner/build/cpuminer ]] && [[ -e /flask/setHashinJson ]]; then
	fw_version="$( /home/sm/miner/build/cpuminer -V | head -n 1 )"
	if [[ "$ASIC_MODEL" == "Toddminer C1" ]]; then
		fw_version="$( awk '{ print $3 }' <<< "$fw_version" )"
	else
		fw_version="$( awk '{ print $4 }' <<< "$fw_version" )"
	fi
elif [[ -s /usr/bin/compile_time ]]; then
	fw_version="$( sed -n 1p /usr/bin/compile_time )"
else
	fw_version='[unknown]'
fi

# print
pretty_print 'host' hostname / 'uptime' uptime / 'local date' local_date
pretty_print 'ip' ip_w_cidr / 'mac' mac / 'gw' gateway / 'dns' nameserver
echo
echo -e "${BPURPLE}${ASIC_MODEL:-[not set]} ${PURPLE}${separator} ${fw_version}${NOCOLOR}"
echo
pretty_print 'Worker' WORKER_NAME / 'Flight sheet' fs_name / 'Client' agent_full_version
pretty_print 'Farm ID' FARM_ID / 'Rig ID' RIG_ID / 'API server' HIVE_HOST_URL

if [[ -n "$FARM_HASH" ]]; then
	pretty_print 'FARM_HASH' FARM_HASH
fi

echo

[[ "$1" != '--disable-logs' ]] && show_mixed_logs
